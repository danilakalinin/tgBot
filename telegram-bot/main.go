package main

import (
	"fmt"
	"log"
	"os"

	tgbotapi "github.com/crocone/tg-bot"
	"github.com/joho/godotenv"
)

var bot *tgbotapi.BotAPI

type button struct {
	name string
	data string
}

func startMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{
			name: "–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
			data: "get gift",
		},
		{
			name: "–ù–∞—á–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç",
			data: "get test",
		},
	}

	buttons := make([][]tgbotapi.InlineKeyboardButton, len(states))
	for index, state := range states {
		buttons[index] = tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(state.name, state.data))
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal(".env not loaded")
	}

	bot, err = tgbotapi.NewBotAPI(os.Getenv("TG_API_BOT_TOKEN"))
	if err != nil {
		log.Fatalf("Failed to initialize Telegram bot API: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("Failed to start listening for updates %v", err)
	}

	for update := range updates {
		if update.CallbackQuery != nil {
			callbacks(update)
		} else if update.Message.IsCommand() {
			commands(update)
		} else {
			// simply message
		}
	}
}

func callbacks(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatId := update.CallbackQuery.Message.Chat.ID
	firstName := update.CallbackQuery.From.FirstName

	var text string
	switch data {

	case "get gift":
		text = fmt.Sprintf(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %v!

–í—ã –ø–æ–ø–∞–ª–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–µ–º–µ–π–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –≥–¥–µ –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫:

üí¨ –≤–µ—Ä–Ω—É—Ç—å –±–ª–∏–∑–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä–æ–π —Ç–∞–∫ –¥–∞–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ,
üí¨ –ª–µ–≥–∫–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫—Ä–∏–∑–∏—Å—ã –≤ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö,
üí¨ –≤–µ—Ä–Ω—É—Ç—å –º–∏—Ä, –ø–æ–∫–æ–π –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤ —Å–µ–º—å—é,
üí¨ –Ω–∞—É—á–∏—Ç—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞,
üí¨ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–æ —Å–≤–æ–∏–º–∏ –¥–µ—Ç—å–º–∏, üí¨ –≤–µ—Ä–Ω—É—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è,
üí¨ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã, –ø–æ–Ω–∏–º–∞—è –≥—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞

–ò –Ω–∞–∫–æ–Ω–µ—Ü, –∫–∞–∫ —Å—Ç–∞—Ç—å —Ç–æ–π —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∏ –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–µ–π, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–µ—á—Ç–∞–µ—Ç–µ.

%v, –Ø —Ö–æ—á—É –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Å —ç—Ç–∏–º üôè

–Ø - –ï–ª–µ–Ω–∞ –ü–ª–µ–≤–∞–∫–æ, —Å–µ–º–µ–π–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ü–æ–º–æ–≥–∞—é –∂–µ–Ω—â–∏–Ω–∞–º 30+ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
–ó–∞ 25 –ª–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ —è –ø–æ–º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–æ–ª–µ–µ 300 —Å–µ–º–µ–π.

–î–ª—è –í–∞—Å —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –ü–û–î–ê–†–ö–ò:

üå∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –∫ –æ–±—Ä–µ—Ç–µ–Ω–∏—é –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∑–∞ 7 –¥–Ω–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –±–µ–∑ —Å—Å–æ—Ä –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏ –¥–Ω—è"
üå∫ –ú–æ—è —Å–µ—Å—Å–∏—è-—Ä–∞–∑–±–æ—Ä üéÅ`, firstName, firstName)
	case "get test":
		msgConfig, inlineMarkup := testQuestions(chatId)
		msgConfig.ReplyMarkup = inlineMarkup
		sendMessage(msgConfig)

	default:
		text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
	}
	msg := tgbotapi.NewMessage(chatId, text)
	sendMessage(msg)
}

func commands(update tgbotapi.Update) {
	command := update.Message.Command()
	switch command {
	case "start":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
		msg.ReplyMarkup = startMenu()
		msg.ParseMode = "Markdown"
		sendMessage(msg)
	}
}

func testQuestions(chatId int64) (tgbotapi.MessageConfig, tgbotapi.InlineKeyboardMarkup) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:"

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
	questions := []string{
		"–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å?",
		// –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	buttons := make([][]tgbotapi.InlineKeyboardButton, len(questions))
	for i, question := range questions {
		buttons[i] = make([]tgbotapi.InlineKeyboardButton, 3) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
		buttons[i][0] = tgbotapi.NewInlineKeyboardButtonData("–†–µ–¥–∫–æ", "answer1_"+question)
		buttons[i][1] = tgbotapi.NewInlineKeyboardButtonData("–ò–Ω–æ–≥–¥–∞", "answer2_"+question)
		buttons[i][2] = tgbotapi.NewInlineKeyboardButtonData("–ß–∞—Å—Ç–æ", "answer3_"+question)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	return tgbotapi.NewMessage(chatId, text), tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func sendMessage(msg tgbotapi.Chattable) {
	if _, err := bot.Send(msg); err != nil {
		log.Panicf("Send message error: %v", err)
	}
}
